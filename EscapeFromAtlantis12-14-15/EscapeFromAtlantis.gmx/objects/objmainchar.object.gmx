<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprmainchar</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Variables
grav = 0.3;
hsp = 0;
vsp = 0;
jumpspeed = 9;
//movespeed = global.playermovespeed;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>

if keyboard_check_pressed(vk_shift)
   {
   instance_create(x,y,objsmoke);
   }
   

///Get Players Input
key_right = keyboard_check(vk_right);
key_left = -keyboard_check(vk_left);
key_jump = keyboard_check_pressed(vk_space);
image_speed = 0;

//React to input
move = key_left + key_right;
hsp = move * global.playermovespeed;
if (vsp &lt; 10) vsp += global.playergravity;





if (y &lt; 650) { 
   global.gamestart = global.gamestart + 1;
}

//jump objplatform
if (place_meeting(x,y+1,objplatform)) or 
(place_meeting(x,y+1,objSmallPlatform)) or 
(place_meeting(x,y+1,objtinybrown)) or
(place_meeting(x,y+1,objbrownfull)) or
(place_meeting(x,y+1,objplatformfull)) or 
(place_meeting(x,y+1,objbluefull)) or
(place_meeting(x,y+1,objbrickbluefull)) or
(place_meeting(x,y+1,objbrickbluesmall)) or
(place_meeting(x,y+1,objgreyfull)) or
(place_meeting(x,y+1,objgreysmall))
{
if keyboard_check_pressed(vk_space){
 vsp = key_jump * -global.playerjumpheight
}
}



//Horizontal collision objplatform
if (place_meeting(x+hsp,y,objplatform)) or 
(place_meeting(x+hsp,y,objSmallPlatform)) or 
(place_meeting(x+hsp,y,objtinybrown)) or
(place_meeting(x+hsp,y,objbrownfull)) or
(place_meeting(x+hsp,y,objplatformfull)) or 
(place_meeting(x+hsp,y,objbluefull)) or
(place_meeting(x+hsp,y,objbrickbluefull)) or
(place_meeting(x+hsp,y,objbrickbluesmall)) or
(place_meeting(x+hsp,y,objgreyfull)) or
(place_meeting(x+hsp,y,objgreysmall)) 
{
    while(!place_meeting(x+sign(hsp),y,objplatform)) and 
    (!place_meeting(x+sign(hsp),y,objSmallPlatform)) and 
    (!place_meeting(x+sign(hsp),y,objtinybrown)) and
    (!place_meeting(x+sign(hsp),y,objbrownfull)) and
    (!place_meeting(x+sign(hsp),y,objplatformfull)) and
    (!place_meeting(x+sign(hsp),y,objbluefull)) and
    (!place_meeting(x+sign(hsp),y,objbrickbluefull)) and
    (!place_meeting(x+sign(hsp),y,objbrickbluesmall)) and
    (!place_meeting(x+sign(hsp),y,objgreyfull)) and
    (!place_meeting(x+sign(hsp),y,objgreysmall)) 
    {
        x += sign(hsp);
    }
    hsp = 0;
}
x += hsp;

//Vertical collision objplatform
if (place_meeting(x,y+vsp,objplatform)) or 
(place_meeting(x,y+vsp,objSmallPlatform)) or 
(place_meeting(x,y+vsp,objtinybrown)) or
(place_meeting(x,y+vsp,objbrownfull)) or
(place_meeting(x,y+vsp,objplatformfull))or
 (place_meeting(x,y+vsp,objbluefull)) or
 (place_meeting(x,y+vsp,objbrickbluefull)) or
 (place_meeting(x,y+vsp,objbrickbluesmall)) or
 (place_meeting(x,y+vsp,objgreyfull)) or
 (place_meeting(x,y+vsp,objgreysmall))
{
    while(!place_meeting(x,y+sign(vsp),objplatform)) and 
    (!place_meeting(x,y+sign(vsp),objSmallPlatform)) and 
    (!place_meeting(x,y+sign(vsp),objtinybrown)) and
    (!place_meeting(x,y+sign(vsp),objbrownfull)) and
    (!place_meeting(x,y+sign(vsp),objplatformfull)) and
    (!place_meeting(x,y+sign(vsp),objbluefull)) and
    (!place_meeting(x,y+sign(vsp),objbrickbluefull)) and
    (!place_meeting(x,y+sign(vsp),objbrickbluesmall)) and
    (!place_meeting(x,y+sign(vsp),objgreyfull)) and
    (!place_meeting(x,y+sign(vsp),objgreysmall)) 
    {
        y += sign(vsp);
    }
    vsp = global.globalvsp;
}

y += vsp;


//animate


if (move = 1) {
image_speed = 2
image_xscale=1;
}

if (move = -1) {
image_speed = 2
image_xscale=-1;
}

//if (vsp &lt; 1) sprite_index = sprPlayerJump; else sprite_index = sprmainchar;

 //while (vsp &gt;= -10) and (vsp &lt;= -0.02) {
 //sprite_index = sprsoar}
// }
 
//while (vsp &gt;= -0.02) {
// sprite_index = sprmainchar
//}


x = ((x mod room_width) + room_width) mod room_width

//if (x &gt; room_width)
//{ x = -sprite_width; }

//if (x &lt; -sprite_width)
//{ x = room_width; }



if (y &gt; room_height) { 

    instance_create(x,y, objsmoke);
    global.dead = 1;
   
 
}



</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>0</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
